/* simplejava.java */
/* Generated By:JavaCC: Do not edit this line. simplejava.java */
public class simplejava implements simplejavaConstants {

/*-----------------------------------------------------------------------*/
  //  Statement
  //
  /*-----------------------------------------------------------------------*/
  static final public 
    ASTStatement statement() throws ParseException {ASTStatement s = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEFTBRACE:{
      /* Checks all statements here */
      
              s = blockStatement();
{if ("" != null) return s;}
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      if (jj_2_1(2)) {
        s = variableDeclarationStatement();
{if ("" != null) return s;}
      } else if (jj_2_2(2)) {
        s = functionCallStatement();
{if ("" != null) return s;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          s = variableStatement();
{if ("" != null) return s;}
          break;
          }
        case IF:{
          s = ifStatement();
{if ("" != null) return s;}
          break;
          }
        case WHILE:{
          s = whileStatement();
{if ("" != null) return s;}
          break;
          }
        case DO:{
          s = doWhileStatement();
{if ("" != null) return s;}
          break;
          }
        case FOR:{
          s = forStatement();
{if ("" != null) return s;}
          break;
          }
        case RETURN:{
          s = returnStatement();
{if ("" != null) return s;}
          break;
          }
        case SEMICOLON:{
          s = emptyStatement();
{if ("" != null) return s;}
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatements blockStatement() throws ParseException {ASTStatements statements = new ASTStatements();
        ASTStatement statement = null;
    jj_consume_token(LEFTBRACE);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FOR:
      case DO:
      case IF:
      case WHILE:
      case RETURN:
      case IDENTIFIER:
      case LEFTBRACE:
      case SEMICOLON:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      statement = statement();
statements.addElement(statement);
    }
    jj_consume_token(RIGHTBRACE);
{if ("" != null) return statements;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTAssignmentStatement variableStatement() throws ParseException {ASTVariable variable = null;
        ASTAssignmentStatement statement = null;
        ASTOperatorExpression opEx = null;
    variable = variable();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case GETS:{
      statement = assignmentStatement();
statement.setvariable(variable);
      break;
      }
    case INCREMENT:
    case DECREMENT:{
      opEx = incDecStatement();
opEx.setleft(new ASTVariableExpression(variable, variable.line())) ;
          statement = new ASTAssignmentStatement(variable, opEx, variable.line());
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return statement;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTAssignmentStatement assignmentStatement() throws ParseException {ASTExpression value = null;
        Token op = null;
    op = jj_consume_token(GETS);
    value = expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEMICOLON:{
      jj_consume_token(SEMICOLON);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
{if ("" != null) return new ASTAssignmentStatement(null, value, op.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTOperatorExpression incDecStatement() throws ParseException {ASTOperatorExpression val = null;
        ASTExpression incDec = null;
        Token t = null;
        int operator = 0;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INCREMENT:{
      t = jj_consume_token(INCREMENT);
operator = 1;
      break;
      }
    case DECREMENT:{
      t = jj_consume_token(DECREMENT);
operator = 2;
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
incDec = new ASTIntegerLiteral(1, t.beginLine);

        val = new ASTOperatorExpression(null, incDec, operator, t.beginLine);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEMICOLON:{
      jj_consume_token(SEMICOLON);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
{if ("" != null) return val;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTVariableDefStatement variableDeclarationStatement() throws ParseException {Token type = null;
        Token name = null;
        ASTExpression init = null;
        int arraydimension = 0;
    type = jj_consume_token(IDENTIFIER);
    name = jj_consume_token(IDENTIFIER);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFTBRACKET:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
      jj_consume_token(LEFTBRACKET);
      jj_consume_token(RIGHTBRACKET);
arraydimension++;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case GETS:{
      jj_consume_token(GETS);
      init = expression();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
if (init == null && arraydimension == 0) {
              {if ("" != null) return new ASTVariableDefStatement(type.image, name.image, name.beginLine);}
          } else if (init == null && arraydimension > 0) {
              {if ("" != null) return new ASTVariableDefStatement(type.image, name.image, arraydimension, name.beginLine);}
          } else if (init != null && arraydimension == 0) {
              {if ("" != null) return new ASTVariableDefStatement(type.image, name.image, init, name.beginLine);}
          } else {
              {if ("" != null) return new ASTVariableDefStatement(type.image, name.image, arraydimension, init, name.beginLine);}
          }
    throw new Error("Missing return statement in function");
  }

  static final public ASTIfStatement ifStatement() throws ParseException {ASTExpression test = null;
        ASTStatement then = null;
        ASTStatement elseStatement = null;
        Token op = null;
    op = jj_consume_token(IF);
    jj_consume_token(LEFTPARENTHESIS);
    test = expression();
    jj_consume_token(RIGHTPARENTHESIS);
    then = statement();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      elseStatement = statement();
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
{if ("" != null) return new ASTIfStatement(test, then, elseStatement, op.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTWhileStatement whileStatement() throws ParseException {ASTExpression test = null;
        ASTStatement body = null;
        Token op = null;
    op = jj_consume_token(WHILE);
    jj_consume_token(LEFTPARENTHESIS);
    test = expression();
    jj_consume_token(RIGHTPARENTHESIS);
    body = statement();
{if ("" != null) return new ASTWhileStatement(test, body, op.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTDoWhileStatement doWhileStatement() throws ParseException {ASTExpression test = null;
        ASTStatement body = null;
        Token op = null;
    op = jj_consume_token(DO);
    body = statement();
    jj_consume_token(WHILE);
    jj_consume_token(LEFTPARENTHESIS);
    test = expression();
    jj_consume_token(RIGHTPARENTHESIS);
    jj_consume_token(SEMICOLON);
{if ("" != null) return new ASTDoWhileStatement(test, body, op.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTForStatement forStatement() throws ParseException {ASTStatement init = null;
        ASTExpression test = null;
        ASTStatement incr = null;
        ASTStatement body = null;
        Token op = null;
    op = jj_consume_token(FOR);
    jj_consume_token(LEFTPARENTHESIS);
    init = statement();
    test = expression();
    jj_consume_token(SEMICOLON);
    incr = statement();
    jj_consume_token(RIGHTPARENTHESIS);
    body = statement();
{if ("" != null) return new ASTForStatement(init, test, incr, body, op.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTFunctionCallStatement functionCallStatement() throws ParseException {ASTFunctionCallStatement funcCall = null;
        Token name = null;
        ASTExpression formal = null;
    name = jj_consume_token(IDENTIFIER);
    jj_consume_token(LEFTPARENTHESIS);
funcCall = new ASTFunctionCallStatement(name.image, name.beginLine);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FALSE:
      case TRUE:
      case NEW:
      case INTEGER_LITERAL:
      case IDENTIFIER:
      case MINUS:
      case LEFTPARENTHESIS:
      case NOT:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_3;
      }
      formal = arguments();
funcCall.addElement(formal);
    }
    jj_consume_token(RIGHTPARENTHESIS);
    jj_consume_token(SEMICOLON);
{if ("" != null) return funcCall;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTReturnStatement returnStatement() throws ParseException {ASTExpression value = null;
        Token op = null;
    op = jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FALSE:
    case TRUE:
    case NEW:
    case INTEGER_LITERAL:
    case IDENTIFIER:
    case MINUS:
    case LEFTPARENTHESIS:
    case NOT:{
      value = expression();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
{if ("" != null) return new ASTReturnStatement(value, op.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTEmptyStatement emptyStatement() throws ParseException {Token op = null;
    op = jj_consume_token(SEMICOLON);
{if ("" != null) return new ASTEmptyStatement(op.beginLine);}
    throw new Error("Missing return statement in function");
  }

/*-----------------------------------------------------------------------*/
  //  Expression
  //
  /*-----------------------------------------------------------------------*/
  static final public 


    ASTExpression expression() throws ParseException {ASTExpression exp = null, exp2 = null;
        Token t = null;
    exp = expression0();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      t = jj_consume_token(OR);
      exp2 = expression0();
exp = new ASTOperatorExpression(exp, exp2, t.image, exp.line());
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  static final public Token compareOps() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUAL:{
      t = jj_consume_token(EQUAL);
{if ("" != null) return t;}
      break;
      }
    case NOTEQUAL:{
      t = jj_consume_token(NOTEQUAL);
{if ("" != null) return t;}
      break;
      }
    case LESSTHAN:{
      t = jj_consume_token(LESSTHAN);
{if ("" != null) return t;}
      break;
      }
    case GREATERTHAN:{
      t = jj_consume_token(GREATERTHAN);
{if ("" != null) return t;}
      break;
      }
    case LESSTHANOREQUAL:{
      t = jj_consume_token(LESSTHANOREQUAL);
{if ("" != null) return t;}
      break;
      }
    case GREATERTHANOREQUAL:{
      t = jj_consume_token(GREATERTHANOREQUAL);
{if ("" != null) return t;}
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression expression0() throws ParseException {ASTExpression exp = null, exp2 = null;
        Token t;
    exp = expression1();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      t = jj_consume_token(AND);
      exp2 = expression1();
exp = new ASTOperatorExpression(exp, exp2, t.image, exp.line());
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression expression1() throws ParseException {ASTExpression exp = null, exp2 = null;
        Token t;
    exp = expression2();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUAL:
      case NOTEQUAL:
      case LESSTHAN:
      case GREATERTHAN:
      case LESSTHANOREQUAL:
      case GREATERTHANOREQUAL:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_6;
      }
      t = compareOps();
      exp2 = expression2();
exp = new ASTOperatorExpression(exp, exp2, t.image, exp.line());
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression expression2() throws ParseException {ASTExpression exp = null, exp2 = null;
        Token t;
    exp = expression3();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MINUS:
      case PLUS:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        t = jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        t = jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      exp2 = expression3();
exp = new ASTOperatorExpression(exp, exp2, t.image, exp.line());
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression expression3() throws ParseException {ASTExpression exp = null, exp2 = null;
        Token t;
    exp = expression4();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:{
        ;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULTIPLY:{
        t = jj_consume_token(MULTIPLY);
        break;
        }
      case DIVIDE:{
        t = jj_consume_token(DIVIDE);
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      exp2 = expression4();
exp = new ASTOperatorExpression(exp, exp2, t.image, exp.line());
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression expression4() throws ParseException {ASTExpression exp = null, zero = null;
        Token t = null, t0 = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      t = jj_consume_token(NOT);
      exp = expression();
{if ("" != null) return new ASTUnaryOperatorExpression(exp, ASTUnaryOperatorExpression.NOT, t.beginLine);}
      break;
      }
    case MINUS:{
      t = jj_consume_token(MINUS);
      exp = expression();
zero = new ASTIntegerLiteral(0, t.beginLine);
{if ("" != null) return new ASTOperatorExpression(zero, exp, ASTOperatorExpression.MINUS, t.beginLine);}
      break;
      }
    case LEFTPARENTHESIS:{
      jj_consume_token(LEFTPARENTHESIS);
      exp = expression();
      jj_consume_token(RIGHTPARENTHESIS);
{if ("" != null) return exp;}
      break;
      }
    case FALSE:
    case TRUE:
    case NEW:
    case INTEGER_LITERAL:
    case IDENTIFIER:{
      exp = term();
{if ("" != null) return exp;}
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression term() throws ParseException {ASTExpression exp = null;
        ASTVariable var = null;
        Token t;
        int array = 0;
        ASTVariable v = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:{
      t = jj_consume_token(INTEGER_LITERAL);
{if ("" != null) return new ASTIntegerLiteral(Integer.parseInt(t.image), t.beginLine);}
      break;
      }
    case TRUE:{
      t = jj_consume_token(TRUE);
{if ("" != null) return new ASTBooleanLiteral(true, t.beginLine);}
      break;
      }
    case FALSE:{
      t = jj_consume_token(FALSE);
{if ("" != null) return new ASTBooleanLiteral(false, t.beginLine);}
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      if (jj_2_3(3)) {
        jj_consume_token(NEW);
        t = jj_consume_token(IDENTIFIER);
        jj_consume_token(LEFTPARENTHESIS);
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case FALSE:
          case TRUE:
          case NEW:
          case INTEGER_LITERAL:
          case IDENTIFIER:
          case MINUS:
          case LEFTPARENTHESIS:
          case NOT:{
            ;
            break;
            }
          default:
            jj_la1[21] = jj_gen;
            break label_9;
          }
          arguments();
        }
        jj_consume_token(RIGHTPARENTHESIS);
{if ("" != null) return new ASTNewClassExpression(t.image, t.beginLine);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:{
          jj_consume_token(NEW);
          t = jj_consume_token(IDENTIFIER);
          label_10:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case LEFTBRACKET:{
              ;
              break;
              }
            default:
              jj_la1[22] = jj_gen;
              break label_10;
            }
            jj_consume_token(LEFTBRACKET);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case FALSE:
            case TRUE:
            case NEW:
            case INTEGER_LITERAL:
            case IDENTIFIER:
            case MINUS:
            case LEFTPARENTHESIS:
            case NOT:{
              exp = expression();
              break;
              }
            default:
              jj_la1[23] = jj_gen;
              ;
            }
            jj_consume_token(RIGHTBRACKET);
array++;
          }
{if ("" != null) return new ASTNewArrayExpression(t.image, exp, array, t.beginLine);}
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          if (jj_2_4(2)) {
            exp = functionCallExpression();
{if ("" != null) return exp;}
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case IDENTIFIER:{
              var = variable();
{if ("" != null) return new ASTVariableExpression(var, var.line());}
              break;
              }
            default:
              jj_la1[26] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression functionCallExpression() throws ParseException {ASTExpression exp = null;
        Token t;
        ASTFunctionCallExpression fexp = null;
    t = jj_consume_token(IDENTIFIER);
fexp = new ASTFunctionCallExpression(t.image, t.beginLine);
    jj_consume_token(LEFTPARENTHESIS);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FALSE:
      case TRUE:
      case NEW:
      case INTEGER_LITERAL:
      case IDENTIFIER:
      case MINUS:
      case LEFTPARENTHESIS:
      case NOT:{
        ;
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        break label_11;
      }
      exp = arguments();
fexp.addElement(exp);
    }
    jj_consume_token(RIGHTPARENTHESIS);
{if ("" != null) return fexp;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression arguments() throws ParseException {ASTExpression exp = null;
    exp = expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      ;
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTVariable variable() throws ParseException {Token name = null;
        ASTVariable var = null;
        ASTExpression expression = null;
    name = jj_consume_token(IDENTIFIER);
var = new ASTBaseVariable(name.image, name.beginLine);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFTBRACKET:
      case PERIOD:{
        ;
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PERIOD:{
        jj_consume_token(PERIOD);
        name = jj_consume_token(IDENTIFIER);
var = new ASTClassVariable(var, name.image, name.beginLine);
        break;
        }
      case LEFTBRACKET:{
        jj_consume_token(LEFTBRACKET);
        expression = expression();
        jj_consume_token(RIGHTBRACKET);
var = new ASTArrayVariable(var, expression, name.beginLine);
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return var;}
    throw new Error("Missing return statement in function");
  }

/*-----------------------------------------------------------------------*/
  //  Declarations
  //
  /*-----------------------------------------------------------------------*/
  static final public 
    ASTClass classDeclaration() throws ParseException {Token name = null;
        ASTInstanceVariableDef var = null;
        ASTInstanceVariableDefs vars = new ASTInstanceVariableDefs();
    jj_consume_token(CLASS);
    name = jj_consume_token(IDENTIFIER);
    jj_consume_token(LEFTBRACE);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        break label_13;
      }
      var = variableDefinition();
vars.addElement(var);
    }
    jj_consume_token(RIGHTBRACE);
{if ("" != null) return new ASTClass(name.image, vars, name.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTInstanceVariableDef variableDefinition() throws ParseException {Token type = null;
        Token name = null;
        int arraydimension = 0;
    // TODO: Expression
            type = jj_consume_token(IDENTIFIER);
    name = jj_consume_token(IDENTIFIER);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFTBRACKET:{
        ;
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        break label_14;
      }
      jj_consume_token(LEFTBRACKET);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FALSE:
      case TRUE:
      case NEW:
      case INTEGER_LITERAL:
      case IDENTIFIER:
      case MINUS:
      case LEFTPARENTHESIS:
      case NOT:{
        expression();
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      jj_consume_token(RIGHTBRACKET);
arraydimension++;
    }
    jj_consume_token(SEMICOLON);
if (arraydimension == 0) {
            {if ("" != null) return new ASTInstanceVariableDef(type.image, name.image, name.beginLine);}
          }
            {if ("" != null) return new ASTInstanceVariableDef(type.image, name.image, arraydimension, name.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTFunctionDefinition functionDeclaration() throws ParseException {Token type = null;
        Token name = null;
        ASTFormals formals = null;
        ASTStatement body = null;
    type = jj_consume_token(IDENTIFIER);
    name = jj_consume_token(IDENTIFIER);
    jj_consume_token(LEFTPARENTHESIS);
    formals = parameters();
    jj_consume_token(RIGHTPARENTHESIS);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEMICOLON:{
      jj_consume_token(SEMICOLON);
      break;
      }
    case FOR:
    case DO:
    case IF:
    case WHILE:
    case RETURN:
    case IDENTIFIER:
    case LEFTBRACE:{
      body = statement();
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
if (body == null) {
            {if ("" != null) return new ASTPrototype(type.image, name.image, formals, name.beginLine);}
          } else {
            {if ("" != null) return new ASTFunction(type.image, name.image, formals, body, name.beginLine);}
          }
    throw new Error("Missing return statement in function");
  }

  static final public ASTFormals parameters() throws ParseException {ASTFormals formals = new ASTFormals();
        ASTFormal formal = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      formal = parameter();
formals.addElement(formal);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[35] = jj_gen;
          break label_15;
        }
        jj_consume_token(COMMA);
        formal = parameter();
formals.addElement(formal);
      }
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      ;
    }
{if ("" != null) return formals;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTFormal parameter() throws ParseException {Token type = null;
        Token name = null;
        int arraydimension = 0;
    type = jj_consume_token(IDENTIFIER);
    name = jj_consume_token(IDENTIFIER);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFTBRACKET:{
        ;
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        break label_16;
      }
      jj_consume_token(LEFTBRACKET);
      jj_consume_token(RIGHTBRACKET);
arraydimension++;
    }
if (arraydimension == 0) {
            {if ("" != null) return new ASTFormal(type.image, name.image, name.beginLine);}
          }
            {if ("" != null) return new ASTFormal(type.image, name.image, arraydimension, name.beginLine);}
    throw new Error("Missing return statement in function");
  }

/*-----------------------------------------------------------------------*/
  //  Program
  //
  /*-----------------------------------------------------------------------*/
  static final public     ASTProgram program() throws ParseException {ASTClasses classes = new ASTClasses();
        ASTFunctionDefinitions functions = new ASTFunctionDefinitions();

        ASTClass c = null;
        ASTFunctionDefinition function = null;
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLASS:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        break label_17;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLASS:{
        c = classDeclaration();
classes.addElement(c);
        break;
        }
      case IDENTIFIER:{
        function = functionDeclaration();
functions.addElement(function);
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
{if ("" != null) return new ASTProgram(classes, functions, 0);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_3R_19()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LEFTPARENTHESIS)) return true;
    return false;
  }

  static private boolean jj_3R_20()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LEFTPARENTHESIS)) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LEFTPARENTHESIS)) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_18()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public simplejavaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[40];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000000,0x135400,0x4135400,0x0,0x0,0x0,0x0,0x1000000,0x0,0x200,0x103ca000,0x103ca000,0x0,0x0,0x0,0x0,0x200000,0x200000,0xc00000,0xc00000,0x103ca000,0x103ca000,0x1000000,0x103ca000,0x8a000,0x40000,0x100000,0x103ca000,0x80000000,0x41000000,0x41000000,0x100000,0x1000000,0x103ca000,0x4135400,0x80000000,0x100000,0x1000000,0x100800,0x100800,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x1000,0x1000,0x2600,0x1000,0x600,0x1000,0x0,0x2000,0x0,0x100,0x100,0x80,0x3f,0x40,0x3f,0x800,0x800,0x0,0x0,0x100,0x100,0x0,0x100,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x100,0x1000,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[4];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public simplejava(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public simplejava(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new simplejavaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public simplejava(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new simplejavaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public simplejava(simplejavaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(simplejavaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 40; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
